<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
  <PropertyGroup>
    <HelixSource>pr/default/</HelixSource>
    <HelixType>tests/default/</HelixType>
    <HelixBuild>$(BUILD_BUILDNUMBER).$(TargetArchitecture)</HelixBuild>
    <Creator>efcore</Creator>
    <WaitForWorkItemCompletion>true</WaitForWorkItemCompletion>
    <EnableAzurePipelinesReporter>true</EnableAzurePipelinesReporter>
    <EnableXUnitReporter>true</EnableXUnitReporter>



    <!-- The helix queue this job should run on. -->
    <HelixTargetQueue>Windows.10.Amd64.Open</HelixTargetQueue>

    <!--
      The set of helix queues to send jobs to.
      This property is multiplexed over just like <TargetFrameworks> for C# projects.
      The project is built once per entry in this list with <HelixTargetQueue> set to the current list element value.

    -->
    <HelixTargetQueues>Windows.10.Amd64.Open;Ubuntu.1804.Amd64.Open;OSX.1014.Amd64.Open</HelixTargetQueues>

  </PropertyGroup>
  <PropertyGroup>
    <!--
      When invoking helix.proj for the whole repo with build.cmd, ProjectToBuild will be set to the path to this project.
      This must be reset in order for Build.props to evaluate a list of projects to be tested on Helix.
    -->
    <ProjectToBuild Condition="'$(ProjectToBuild)' == '$(MSBuildProjectFullPath)'"/>
  </PropertyGroup>

  <PropertyGroup Condition="'$(BuildAllConfigurations)' == 'true'">
    <!-- Use helix feature to include dotnet CLI for every workitem and add it to the path -->
    <IncludeDotNetCli>true</IncludeDotNetCli>
    <DotNetCliPackageType>sdk</DotNetCliPackageType>

    <GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</GlobalJsonContent>
    <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($(GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</DotNetCliVersion>
  </PropertyGroup>


  <ItemGroup>
    <XUnitProject Include="$(RepoRoot)\test\ef.Tests\ef.Tests.csproj"/>
  </ItemGroup>
  <PropertyGroup>
    <!-- TargetFramework to publish the xunit test projects for -->
    <XUnitPublishTargetFramework>netcoreapp3.1</XUnitPublishTargetFramework>
    <!-- TargetFramework of the xunit.runner.dll to use when running the tests -->
    <XUnitRuntimeTargetFramework>netcoreapp3.1</XUnitRuntimeTargetFramework>
    <!-- PackageVersion of xunit.runner.console to use -->
    <XUnitRunnerVersion>$(XUnitVersion)</XUnitRunnerVersion>
    <!-- Additional command line arguments to pass to xunit.console.exe -->
    <XUnitArguments></XUnitArguments>
  </PropertyGroup>
</Project>